trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

resources:
  containers:
  - container: ubuntu-base-18-04
    image: okapilib/ubuntu-base:18.04

stages:
- stage: Build
  jobs:
    - job: Linux

      container: ubuntu-base-18-04

      steps:
      - script: git submodule update --init --recursive
        displayName: "Update Submodules"
      - script: make
        displayName: "Make"
      - script: |
          make template
          mkdir template
          cp okapilib@*.zip template/
        displayName: "Make Template"
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: template
          artifactName: template
        condition: succeeded()
        displayName: "Publish Template"
      - script: mkdir cmake-build-debug
      - script: cmake -DCMAKE_BUILD_TYPE=Debug -G "CodeBlocks - Unix Makefiles" ..
        displayName: "CMake Configure"
        workingDirectory: cmake-build-debug
        env: { CC: gcc-7, CXX: g++-7 }
      - script: cmake --build . --target OkapiLibV5 -- -j 2
        displayName: "CMake Build"
        workingDirectory: cmake-build-debug
      - script: ./OkapiLibV5
        displayName: "Run Tests"
        workingDirectory: cmake-build-debug
      - script: valgrind --tool=memcheck --leak-check=full --leak-resolution=med --show-leak-kinds=all --undef-value-errors=yes --track-origins=yes  --error-exitcode=1 --show-reachable=no ./OkapiLibV5
        displayName: "Run Valgrind"
        workingDirectory: cmake-build-debug
      - script: |
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info
          bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
        displayName: "Upload Coverage"
        env:
          CODECOV_TOKEN: $(CODECOV_TOKEN)
      - script: ./run_doxygen.sh
        displayName: "Build Docs"
      - script: |
          rm -rf /tmp/html
          cp -r html /tmp/
          git config --local user.name "Azure Pipelines"
          git config --local user.email "azuredevops@microsoft.com"
          git checkout gh-pages
          rm -rf *
          cp -r /tmp/html/* .
          git add .
          git commit -m "Publishing GitHub Pages ${BUILD_NUM}"
          git push https://$(DOCS_PUBLISH_PAT)@github.com/OkapiLib/OkapiLib.git --force
        displayName: "Publish Docs"
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        env:
          DOCS_PUBLISH_PAT: $(DOCS_PUBLISH_PAT)
          BUILD_NUM: $(Build.BuildNumber)
